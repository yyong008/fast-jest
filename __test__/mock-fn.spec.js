test("测试 Expect objectExpect 对象属性", () => {
	const objectExpect = Object.keys(expect)

	expect(objectExpect).toContain("extend")
	expect(objectExpect).toContain("anything")
	expect(objectExpect).toContain("any")
	expect(objectExpect).toContain("not")
	expect(objectExpect).toContain("arrayContaining")
	expect(objectExpect).toContain("closeTo")
	expect(objectExpect).toContain("objectContaining")
	expect(objectExpect).toContain("stringContaining")
	expect(objectExpect).toContain("stringMatching")
	expect(objectExpect).toContain("addSnapshotSerializer")
	expect(objectExpect).toContain("assertions")
	expect(objectExpect).toContain("hasAssertions")
	expect(objectExpect).toContain("getState")
	expect(objectExpect).toContain("setState")
	expect(objectExpect).toContain("extractExpectedAssertionsErrors")
	expect(objectExpect).toContain("toMatchInlineSnapshot")
	expect(objectExpect).toContain("toMatchSnapshot")
	expect(objectExpect).toContain("toThrowErrorMatchingInlineSnapshot")
	expect(objectExpect).toContain("toThrowErrorMatchingSnapshot")
})

test("test expect not", () => {
	const expectNot = Object.keys(expect.not);
	expect(expectNot).toContain('arrayContaining')
	expect(expectNot).toContain('closeTo')
	expect(expectNot).toContain('objectContaining')
	expect(expectNot).toContain('stringContaining')
	expect(expectNot).toContain('stringMatching')
	expect(expectNot).toContain('toMatchInlineSnapshot')
	expect(expectNot).toContain('toMatchSnapshot')
	expect(expectNot).toContain('toThrowErrorMatchingInlineSnapshot')
	expect(expectNot).toContain('toThrowErrorMatchingSnapshot')
})

test("test expect function callback attr", () => {
	const expectCallbackAttrs = Object.keys(expect(1))
	
	expect(expectCallbackAttrs).toContain('not')
	expect(expectCallbackAttrs).toContain('rejects')
	expect(expectCallbackAttrs).toContain('resolves')
	expect(expectCallbackAttrs).toContain('toBe')
	expect(expectCallbackAttrs).toContain('toBeCloseTo')
	expect(expectCallbackAttrs).toContain('toBeDefined')
	expect(expectCallbackAttrs).toContain('toBeFalsy')
	expect(expectCallbackAttrs).toContain('toBeGreaterThan')
	expect(expectCallbackAttrs).toContain('toBeGreaterThanOrEqual')
	expect(expectCallbackAttrs).toContain('toBeInstanceOf')
	expect(expectCallbackAttrs).toContain('toBeLessThan')
	expect(expectCallbackAttrs).toContain('toBeLessThanOrEqual')
	expect(expectCallbackAttrs).toContain('toBeNaN')
	expect(expectCallbackAttrs).toContain('toBeNull')
	expect(expectCallbackAttrs).toContain('toBeTruthy')
	expect(expectCallbackAttrs).toContain('toBeUndefined')
	expect(expectCallbackAttrs).toContain('toContain')
	expect(expectCallbackAttrs).toContain('toContainEqual')
	expect(expectCallbackAttrs).toContain('toEqual')
	expect(expectCallbackAttrs).toContain('toHaveLength')
	expect(expectCallbackAttrs).toContain('toHaveProperty')
	expect(expectCallbackAttrs).toContain('toMatch')
	expect(expectCallbackAttrs).toContain('toMatchObject')
	expect(expectCallbackAttrs).toContain('toStrictEqual')
	expect(expectCallbackAttrs).toContain('lastCalledWith')
	expect(expectCallbackAttrs).toContain('lastReturnedWith')
	expect(expectCallbackAttrs).toContain('nthCalledWith')
	expect(expectCallbackAttrs).toContain('nthReturnedWith')
	expect(expectCallbackAttrs).toContain('toBeCalled')
	expect(expectCallbackAttrs).toContain('toBeCalledTimes')
	expect(expectCallbackAttrs).toContain('toBeCalledWith')
	expect(expectCallbackAttrs).toContain('toHaveBeenCalled')
	expect(expectCallbackAttrs).toContain('toHaveBeenCalledTimes')
	expect(expectCallbackAttrs).toContain('toHaveBeenCalledTimes')
	expect(expectCallbackAttrs).toContain('toHaveBeenCalledWith')
	expect(expectCallbackAttrs).toContain('toHaveBeenLastCalledWith')
	expect(expectCallbackAttrs).toContain('toHaveBeenNthCalledWith')
	expect(expectCallbackAttrs).toContain('toHaveLastReturnedWith')
	expect(expectCallbackAttrs).toContain('toHaveNthReturnedWith')
	expect(expectCallbackAttrs).toContain('toHaveReturned')
	expect(expectCallbackAttrs).toContain('toHaveReturnedTimes')
	expect(expectCallbackAttrs).toContain('toHaveReturnedWith')
	expect(expectCallbackAttrs).toContain('toReturn')
	expect(expectCallbackAttrs).toContain('toReturnTimes')
	expect(expectCallbackAttrs).toContain('toReturnWith')
	expect(expectCallbackAttrs).toContain('toThrow')
	expect(expectCallbackAttrs).toContain('toThrowError')
	expect(expectCallbackAttrs).toContain('toMatchInlineSnapshot')
	expect(expectCallbackAttrs).toContain('toMatchSnapshot')
	expect(expectCallbackAttrs).toContain('toThrowErrorMatchingInlineSnapshot')
	expect(expectCallbackAttrs).toContain('toThrowErrorMatchingSnapshot')
})

test("test expect(1).not", () => {
	const expect1Not = Object.keys(expect(1).not);
	
	expect(expect1Not).toContain('toBe')
	expect(expect1Not).toContain('toBeCloseTo')
	expect(expect1Not).toContain('toBeDefined')
	expect(expect1Not).toContain('toBeFalsy')
	expect(expect1Not).toContain('toBeGreaterThan')
	expect(expect1Not).toContain('toBeGreaterThanOrEqual')
	expect(expect1Not).toContain('toBeInstanceOf')
	expect(expect1Not).toContain('toBeLessThan')
	expect(expect1Not).toContain('toBeLessThanOrEqual')
	expect(expect1Not).toContain('toBeNaN')
	expect(expect1Not).toContain('toBeNull')
	expect(expect1Not).toContain('toBeTruthy')
	expect(expect1Not).toContain('toBeUndefined')
	expect(expect1Not).toContain('toContain')
	expect(expect1Not).toContain('toContainEqual')
	expect(expect1Not).toContain('toEqual')
	expect(expect1Not).toContain('toHaveLength')
	expect(expect1Not).toContain('toHaveProperty')
	expect(expect1Not).toContain('toMatch')
	expect(expect1Not).toContain('toMatchObject')
	expect(expect1Not).toContain('toStrictEqual')
	expect(expect1Not).toContain('lastCalledWith')
	expect(expect1Not).toContain('lastReturnedWith')
	expect(expect1Not).toContain('nthCalledWith')
	expect(expect1Not).toContain('nthReturnedWith')
	expect(expect1Not).toContain('toBeCalled')
	expect(expect1Not).toContain('toBeCalledTimes')
	expect(expect1Not).toContain('toBeCalledWith')
	expect(expect1Not).toContain('toHaveBeenCalled')
	expect(expect1Not).toContain('toHaveBeenCalledTimes')
	expect(expect1Not).toContain('toHaveBeenCalledTimes')
	expect(expect1Not).toContain('toHaveBeenCalledWith')
	expect(expect1Not).toContain('toHaveBeenLastCalledWith')
	expect(expect1Not).toContain('toHaveBeenNthCalledWith')
	expect(expect1Not).toContain('toHaveLastReturnedWith')
	expect(expect1Not).toContain('toHaveNthReturnedWith')
	expect(expect1Not).toContain('toHaveReturned')
	expect(expect1Not).toContain('toHaveReturnedTimes')
	expect(expect1Not).toContain('toHaveReturnedWith')
	expect(expect1Not).toContain('toReturn')
	expect(expect1Not).toContain('toReturnTimes')
	expect(expect1Not).toContain('toReturnWith')
	expect(expect1Not).toContain('toThrow')
	expect(expect1Not).toContain('toThrowError')
	expect(expect1Not).toContain('toMatchInlineSnapshot')
	expect(expect1Not).toContain('toMatchSnapshot')
	expect(expect1Not).toContain('toThrowErrorMatchingInlineSnapshot')
	expect(expect1Not).toContain('toThrowErrorMatchingSnapshot')
})

test("test expect(Promise.resolve('lemon')).resolves", () => {
	const expectResolves = Object.keys(expect(Promise.resolve('lemon')).resolves);
	
	expect(expectResolves).toContain('toBe')
	expect(expectResolves).toContain('toBeCloseTo')
	expect(expectResolves).toContain('toBeDefined')
	expect(expectResolves).toContain('toBeFalsy')
	expect(expectResolves).toContain('toBeGreaterThan')
	expect(expectResolves).toContain('toBeGreaterThanOrEqual')
	expect(expectResolves).toContain('toBeInstanceOf')
	expect(expectResolves).toContain('toBeLessThan')
	expect(expectResolves).toContain('toBeLessThanOrEqual')
	expect(expectResolves).toContain('toBeNaN')
	expect(expectResolves).toContain('toBeNull')
	expect(expectResolves).toContain('toBeTruthy')
	expect(expectResolves).toContain('toBeUndefined')
	expect(expectResolves).toContain('toContain')
	expect(expectResolves).toContain('toContainEqual')
	expect(expectResolves).toContain('toEqual')
	expect(expectResolves).toContain('toHaveLength')
	expect(expectResolves).toContain('toHaveProperty')
	expect(expectResolves).toContain('toMatch')
	expect(expectResolves).toContain('toMatchObject')
	expect(expectResolves).toContain('toStrictEqual')
	expect(expectResolves).toContain('lastCalledWith')
	expect(expectResolves).toContain('lastReturnedWith')
	expect(expectResolves).toContain('nthCalledWith')
	expect(expectResolves).toContain('nthReturnedWith')
	expect(expectResolves).toContain('toBeCalled')
	expect(expectResolves).toContain('toBeCalledTimes')
	expect(expectResolves).toContain('toBeCalledWith')
	expect(expectResolves).toContain('toHaveBeenCalled')
	expect(expectResolves).toContain('toHaveBeenCalledTimes')
	expect(expectResolves).toContain('toHaveBeenCalledTimes')
	expect(expectResolves).toContain('toHaveBeenCalledWith')
	expect(expectResolves).toContain('toHaveBeenLastCalledWith')
	expect(expectResolves).toContain('toHaveBeenNthCalledWith')
	expect(expectResolves).toContain('toHaveLastReturnedWith')
	expect(expectResolves).toContain('toHaveNthReturnedWith')
	expect(expectResolves).toContain('toHaveReturned')
	expect(expectResolves).toContain('toHaveReturnedTimes')
	expect(expectResolves).toContain('toHaveReturnedWith')
	expect(expectResolves).toContain('toReturn')
	expect(expectResolves).toContain('toReturnTimes')
	expect(expectResolves).toContain('toReturnWith')
	expect(expectResolves).toContain('toThrow')
	expect(expectResolves).toContain('toThrowError')
	expect(expectResolves).toContain('toMatchInlineSnapshot')
	expect(expectResolves).toContain('toMatchSnapshot')
	expect(expectResolves).toContain('toThrowErrorMatchingInlineSnapshot')
	expect(expectResolves).toContain('toThrowErrorMatchingSnapshot')
})



test("test expect(Promise.rejests('lemon')).resolves", () => {
	const expectResolves = Object.keys(expect(Promise.reject('lemon')).rejects);
	
	expect(expectResolves).toContain('toBe')
	expect(expectResolves).toContain('toBeCloseTo')
	expect(expectResolves).toContain('toBeDefined')
	expect(expectResolves).toContain('toBeFalsy')
	expect(expectResolves).toContain('toBeGreaterThan')
	expect(expectResolves).toContain('toBeGreaterThanOrEqual')
	expect(expectResolves).toContain('toBeInstanceOf')
	expect(expectResolves).toContain('toBeLessThan')
	expect(expectResolves).toContain('toBeLessThanOrEqual')
	expect(expectResolves).toContain('toBeNaN')
	expect(expectResolves).toContain('toBeNull')
	expect(expectResolves).toContain('toBeTruthy')
	expect(expectResolves).toContain('toBeUndefined')
	expect(expectResolves).toContain('toContain')
	expect(expectResolves).toContain('toContainEqual')
	expect(expectResolves).toContain('toEqual')
	expect(expectResolves).toContain('toHaveLength')
	expect(expectResolves).toContain('toHaveProperty')
	expect(expectResolves).toContain('toMatch')
	expect(expectResolves).toContain('toMatchObject')
	expect(expectResolves).toContain('toStrictEqual')
	expect(expectResolves).toContain('lastCalledWith')
	expect(expectResolves).toContain('lastReturnedWith')
	expect(expectResolves).toContain('nthCalledWith')
	expect(expectResolves).toContain('nthReturnedWith')
	expect(expectResolves).toContain('toBeCalled')
	expect(expectResolves).toContain('toBeCalledTimes')
	expect(expectResolves).toContain('toBeCalledWith')
	expect(expectResolves).toContain('toHaveBeenCalled')
	expect(expectResolves).toContain('toHaveBeenCalledTimes')
	expect(expectResolves).toContain('toHaveBeenCalledTimes')
	expect(expectResolves).toContain('toHaveBeenCalledWith')
	expect(expectResolves).toContain('toHaveBeenLastCalledWith')
	expect(expectResolves).toContain('toHaveBeenNthCalledWith')
	expect(expectResolves).toContain('toHaveLastReturnedWith')
	expect(expectResolves).toContain('toHaveNthReturnedWith')
	expect(expectResolves).toContain('toHaveReturned')
	expect(expectResolves).toContain('toHaveReturnedTimes')
	expect(expectResolves).toContain('toHaveReturnedWith')
	expect(expectResolves).toContain('toReturn')
	expect(expectResolves).toContain('toReturnTimes')
	expect(expectResolves).toContain('toReturnWith')
	expect(expectResolves).toContain('toThrow')
	expect(expectResolves).toContain('toThrowError')
	expect(expectResolves).toContain('toMatchInlineSnapshot')
	expect(expectResolves).toContain('toMatchSnapshot')
	expect(expectResolves).toContain('toThrowErrorMatchingInlineSnapshot')
	expect(expectResolves).toContain('toThrowErrorMatchingSnapshot')
})

